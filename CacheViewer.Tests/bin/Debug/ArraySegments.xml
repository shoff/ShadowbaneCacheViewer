<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ArraySegments</name>
    </assembly>
    <members>
        <member name="T:ArraySegments.ArraySegmentExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.ArraySegment`1"/>.
            </summary>
        </member>
        <member name="M:ArraySegments.ArraySegmentExtensions.AsArraySegment``1(``0[],System.Int32,System.Int32)">
            <summary>
            Creates an array segment referencing this array.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="array">The array.</param>
            <param name="offset">The offset in this array where the segment begins. Must be in the range <c>[0, <paramref name="array"/>.Length]</c>.</param>
            <param name="count">The length of the segment. Must be in the range <c>[0, <paramref name="array"/>.Length - <paramref name="offset"/>]</c>.</param>
            <returns>A new array segment.</returns>
        </member>
        <member name="M:ArraySegments.ArraySegmentExtensions.AsArraySegment``1(``0[],System.Int32)">
            <summary>
            Creates an array segment referencing this array.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="array">The array.</param>
            <param name="offset">The offset in this array where the segment begins. Defaults to <c>0</c> (the beginning of the array). Must be in the range <c>[0, <paramref name="array"/>.Length]</c>.</param>
            <returns>A new array segment.</returns>
        </member>
        <member name="M:ArraySegments.ArraySegmentExtensions.CreateStream(System.ArraySegment{System.Byte},System.Boolean)">
            <summary>
            Creates a <see cref="T:System.IO.MemoryStream"/> over this array segment. Multiple streams may be created for the same array and array segment, but if one of them writes then any buffering will cause inconsistent views.
            </summary>
            <param name="segment">The array segment.</param>
            <param name="writable">A value indicating whether the stream is writable. Defautls to <c>true</c>.</param>
            <returns>A new <see cref="T:System.IO.MemoryStream"/>.</returns>
        </member>
        <member name="M:ArraySegments.ArraySegmentExtensions.CreateBinaryReader(System.ArraySegment{System.Byte})">
            <summary>
            Creates a <see cref="T:System.IO.BinaryReader"/> over this array segment.
            </summary>
            <param name="segment">The array segment.</param>
            <returns>A new <see cref="T:System.IO.BinaryReader"/>.</returns>
        </member>
        <member name="M:ArraySegments.ArraySegmentExtensions.CreateBinaryWriter(System.ArraySegment{System.Byte})">
            <summary>
            Creates a <see cref="T:System.IO.BinaryWriter"/> over this array segment.
            </summary>
            <param name="segment">The array segment.</param>
            <returns>A new <see cref="T:System.IO.BinaryWriter"/>.</returns>
        </member>
        <member name="M:ArraySegments.ArraySegmentExtensions.CreateArraySegmentReader``1(System.ArraySegment{``0})">
            <summary>
            Creates an <see cref="T:ArraySegments.ArraySegmentReader`1"/> over this array segment.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="segment">The array segment.</param>
            <returns>A new <see cref="T:ArraySegments.ArraySegmentReader`1"/>.</returns>
        </member>
        <member name="M:ArraySegments.ArraySegmentExtensions.Take``1(System.ArraySegment{``0},System.Int32)">
            <summary>
            Creates a new array segment by taking a number of elements from the beginning of this array segment.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="segment">The array segment.</param>
            <param name="count">The number of elements in the new array segment. This must be in the range <c>[0, <paramref name="segment"/>.Count]</c>.</param>
            <returns>The new array segment.</returns>
        </member>
        <member name="M:ArraySegments.ArraySegmentExtensions.Skip``1(System.ArraySegment{``0},System.Int32)">
            <summary>
            Creates a new array segment by skipping a number of elements from the beginning of this array segment.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="segment">The array segment.</param>
            <param name="count">The number of elements to skip. This must be in the range <c>[0, <paramref name="segment"/>.Count]</c>.</param>
            <returns>The new array segment.</returns>
        </member>
        <member name="M:ArraySegments.ArraySegmentExtensions.Slice``1(System.ArraySegment{``0},System.Int32,System.Int32)">
            <summary>
            Creates a new array segment by skipping a number of elements and then taking a number of elements from this array segment.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="segment">The array segment.</param>
            <param name="skipCount">The number of elements to skip. This must be in the range <c>[0, <paramref name="segment"/>.Count]</c>.</param>
            <param name="takeCount">The number of elements in the new array segment. This must be in the range <c>[0, <paramref name="segment"/>.Count - <paramref name="skipCount"/>]</c>.</param>
            <returns>The new array segment.</returns>
        </member>
        <member name="M:ArraySegments.ArraySegmentExtensions.TakeLast``1(System.ArraySegment{``0},System.Int32)">
            <summary>
            Creates a new array segment by taking a number of elements from the end of this array segment.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="segment">The array segment.</param>
            <param name="count">The number of elements in the new array segment. This must be in the range <c>[0, <paramref name="segment"/>.Count]</c>.</param>
            <returns>The new array segment.</returns>
        </member>
        <member name="M:ArraySegments.ArraySegmentExtensions.SkipLast``1(System.ArraySegment{``0},System.Int32)">
            <summary>
            Creates a new array segment by skipping a number of elements from the end of this array segment.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="segment">The array segment.</param>
            <param name="count">The number of elements to skip. This must be in the range <c>[0, <paramref name="segment"/>.Count]</c>.</param>
            <returns>The new array segment.</returns>
        </member>
        <member name="M:ArraySegments.ArraySegmentExtensions.AsIList``1(System.ArraySegment{``0})">
            <summary>
            Creates an <see cref="T:System.Collections.Generic.IList`1"/> wrapper for this array segment. The wrapper also implements <see cref="T:System.Collections.IList"/>.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="segment">The array segment.</param>
            <returns>The wrapper.</returns>
        </member>
        <member name="M:ArraySegments.ArraySegmentExtensions.CopyTo``1(System.ArraySegment{``0},System.ArraySegment{``0})">
            <summary>
            Copies the elements in this array segment into a destination array segment. The copy operation will not overflow the bounds of the segments; it will copy <c>min(segment.Count, destination.Count)</c> elements.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="segment">The source array segment.</param>
            <param name="destination">The detsintation array segment.</param>
        </member>
        <member name="M:ArraySegments.ArraySegmentExtensions.CopyTo``1(System.ArraySegment{``0},``0[],System.Int32)">
            <summary>
            Copies the elements in this array segment into a destination array.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="segment">The array segment.</param>
            <param name="array">The destination array. May not be <c>null</c>.</param>
            <param name="arrayIndex">The index in the destination array at which to begin copying. Defaults to <c>0</c>. Must be greater than or equal to <c>0</c>.</param>
        </member>
        <member name="M:ArraySegments.ArraySegmentExtensions.ToArray``1(System.ArraySegment{``0})">
            <summary>
            Creates a new array containing the elements in this array segment.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
            <param name="segment">The array segment.</param>
            <returns>The new array.</returns>
        </member>
        <member name="T:ArraySegments.ArraySegmentListWrapper`1">
            <summary>
            A wrapper around an array segment, providing <see cref="T:System.Collections.Generic.IList`1"/> and <see cref="T:System.Collections.IList"/> implementations.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
        </member>
        <member name="F:ArraySegments.ArraySegmentListWrapper`1.segment">
            <summary>
            The array segment.
            </summary>
        </member>
        <member name="M:ArraySegments.ArraySegmentListWrapper`1.#ctor(System.ArraySegment{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ArraySegments.ArraySegmentListWrapper`1"/> class.
            </summary>
            <param name="segment">The array segment.</param>
        </member>
        <member name="M:ArraySegments.ArraySegmentListWrapper`1.GetEnumerator">
            <summary>
            Gets an enumerator which enumerates the elements in the array segment.
            </summary>
            <returns>An enumerator which enumerates the elements in the array segment.</returns>
        </member>
        <member name="M:ArraySegments.ArraySegmentListWrapper`1.ObjectIsT(System.Object)">
            <summary>
            Returns whether or not the type of a given item indicates it is appropriate for storing in this list.
            </summary>
            <param name="item">The item to test.</param>
            <returns><c>true</c> if the item is appropriate to store in this list; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ArraySegments.ArraySegmentListWrapper`1.NotSupported">
            <summary>
            Returns an exception stating that the operation is not supported.
            </summary>
            <returns>An exception stating that the operation is not supported.</returns>
        </member>
        <member name="P:ArraySegments.ArraySegmentListWrapper`1.Segment">
            <summary>
            Gets the array segment.
            </summary>
        </member>
        <member name="P:ArraySegments.ArraySegmentListWrapper`1.Count">
            <summary>
            Gets the number of elements in this array segment.
            </summary>
        </member>
        <member name="P:ArraySegments.ArraySegmentListWrapper`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
        </member>
        <member name="T:ArraySegments.ArraySegmentReader`1">
            <summary>
            A reader that divides a source <see cref="T:System.ArraySegment`1"/> into multiple <see cref="T:System.ArraySegment`1"/> instances.
            </summary>
            <typeparam name="T">The type of elements contained in the array.</typeparam>
        </member>
        <member name="F:ArraySegments.ArraySegmentReader`1.source">
            <summary>
            The source array segment.
            </summary>
        </member>
        <member name="M:ArraySegments.ArraySegmentReader`1.#ctor(System.ArraySegment{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ArraySegments.ArraySegmentReader`1"/> class.
            </summary>
            <param name="source">The source array segment.</param>
        </member>
        <member name="M:ArraySegments.ArraySegmentReader`1.Seek(System.Int32,System.IO.SeekOrigin)">
            <summary>
            Sets the position of this reader. Returns the new position.
            </summary>
            <param name="offset">The offset from the origin.</param>
            <param name="origin">The origin to use when setting the position.</param>
            <returns>The new position.</returns>
        </member>
        <member name="M:ArraySegments.ArraySegmentReader`1.Read(System.Int32)">
            <summary>
            Creates a new array segment which starts at the current position and covers the specified number of elements.
            </summary>
            <param name="count">The number of elements in the new array segment.</param>
            <returns>The new array segment.</returns>
        </member>
        <member name="P:ArraySegments.ArraySegmentReader`1.Source">
            <summary>
            Gets the source array segment.
            </summary>
        </member>
        <member name="P:ArraySegments.ArraySegmentReader`1.Position">
            <summary>
            Gets or sets the position of this reader.
            </summary>
        </member>
    </members>
</doc>
