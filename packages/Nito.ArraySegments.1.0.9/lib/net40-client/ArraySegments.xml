<?xml version="1.0"?>
<doc>
  <assembly>
    <name>ArraySegments</name>
  </assembly>
  <members>
    <member name="T:ArraySegments.ArraySegmentExtensions">
      <summary>
            Provides extension methods for <see cref="T:System.ArraySegment`1" />.
            </summary>
    </member>
    <member name="M:ArraySegments.ArraySegmentExtensions.AsArraySegment``1(``0[],System.Int32,System.Int32)">
      <summary>
            Creates an array segment referencing this array.
            </summary>
      <typeparam name="T">The type of elements contained in the array.</typeparam>
      <param name="array">The array.</param>
      <param name="offset">The offset in this array where the segment begins. Must be in the range <c>[0, <paramref name="array" />.Length]</c>.</param>
      <param name="count">The length of the segment. Must be in the range <c>[0, <paramref name="array" />.Length - <paramref name="offset" />]</c>.</param>
      <returns>A new array segment.</returns>
      <requires csharp="array != null" vb="array &lt;&gt; Nothing">array != null</requires>
      <requires csharp="offset &gt;= 0" vb="offset &gt;= 0">offset &gt;= 0</requires>
      <requires csharp="offset &lt;= array.Length" vb="offset &lt;= array.Length">offset &lt;= array.Length</requires>
      <requires csharp="count &gt;= 0" vb="count &gt;= 0">count &gt;= 0</requires>
      <requires csharp="count &lt;= array.Length - offset" vb="count &lt;= array.Length - offset">count &lt;= array.Length - offset</requires>
      <ensures csharp="result.Array == array" vb="result.Array = array">result.Array == array</ensures>
      <ensures csharp="result.Offset == offset" vb="result.Offset = offset">result.Offset == offset</ensures>
      <ensures csharp="result.Count == count" vb="result.Count = count">result.Count == count</ensures>
    </member>
    <member name="M:ArraySegments.ArraySegmentExtensions.AsArraySegment``1(``0[],System.Int32)">
      <summary>
            Creates an array segment referencing this array.
            </summary>
      <typeparam name="T">The type of elements contained in the array.</typeparam>
      <param name="array">The array.</param>
      <param name="offset">The offset in this array where the segment begins. Defaults to <c>0</c> (the beginning of the array). Must be in the range <c>[0, <paramref name="array" />.Length]</c>.</param>
      <returns>A new array segment.</returns>
      <requires csharp="array != null" vb="array &lt;&gt; Nothing">array != null</requires>
      <requires csharp="offset &gt;= 0" vb="offset &gt;= 0">offset &gt;= 0</requires>
      <requires csharp="offset &lt;= array.Length" vb="offset &lt;= array.Length">offset &lt;= array.Length</requires>
      <ensures csharp="result.Array == array" vb="result.Array = array">result.Array == array</ensures>
      <ensures csharp="result.Offset == offset" vb="result.Offset = offset">result.Offset == offset</ensures>
      <ensures csharp="result.Count == array.Length - offset" vb="result.Count = array.Length - offset">result.Count == array.Length - offset</ensures>
    </member>
    <member name="M:ArraySegments.ArraySegmentExtensions.CreateStream(System.ArraySegment{System.Byte},System.Boolean)">
      <summary>
            Creates a <see cref="T:System.IO.MemoryStream" /> over this array segment. Multiple streams may be created for the same array and array segment, but if one of them writes then any buffering will cause inconsistent views.
            </summary>
      <param name="segment">The array segment.</param>
      <param name="writable">A value indicating whether the stream is writable. Defautls to <c>true</c>.</param>
      <returns>A new <see cref="T:System.IO.MemoryStream" />.</returns>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:ArraySegments.ArraySegmentExtensions.CreateBinaryReader(System.ArraySegment{System.Byte})">
      <summary>
            Creates a <see cref="T:System.IO.BinaryReader" /> over this array segment.
            </summary>
      <param name="segment">The array segment.</param>
      <returns>A new <see cref="T:System.IO.BinaryReader" />.</returns>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:ArraySegments.ArraySegmentExtensions.CreateBinaryWriter(System.ArraySegment{System.Byte})">
      <summary>
            Creates a <see cref="T:System.IO.BinaryWriter" /> over this array segment.
            </summary>
      <param name="segment">The array segment.</param>
      <returns>A new <see cref="T:System.IO.BinaryWriter" />.</returns>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:ArraySegments.ArraySegmentExtensions.CreateArraySegmentReader``1(System.ArraySegment{``0})">
      <summary>
            Creates an <see cref="T:ArraySegments.ArraySegmentReader`1" /> over this array segment.
            </summary>
      <typeparam name="T">The type of elements contained in the array.</typeparam>
      <param name="segment">The array segment.</param>
      <returns>A new <see cref="T:ArraySegments.ArraySegmentReader`1" />.</returns>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures csharp="result.Source == segment" vb="result.Source = segment ">result.Source == segment</ensures>
    </member>
    <member name="M:ArraySegments.ArraySegmentExtensions.Take``1(System.ArraySegment{``0},System.Int32)">
      <summary>
            Creates a new array segment by taking a number of elements from the beginning of this array segment.
            </summary>
      <typeparam name="T">The type of elements contained in the array.</typeparam>
      <param name="segment">The array segment.</param>
      <param name="count">The number of elements in the new array segment. This must be in the range <c>[0, <paramref name="segment" />.Count]</c>.</param>
      <returns>The new array segment.</returns>
      <requires csharp="count &gt;= 0" vb="count &gt;= 0">count &gt;= 0</requires>
      <requires csharp="count &lt;= segment.Count" vb="count &lt;= segment.Count">count &lt;= segment.Count</requires>
      <ensures csharp="result.Array == segment.Array" vb="result.Array = segment.Array">result.Array == segment.Array</ensures>
      <ensures csharp="result.Offset == segment.Offset" vb="result.Offset = segment.Offset">result.Offset == segment.Offset</ensures>
      <ensures csharp="result.Count == count" vb="result.Count = count">result.Count == count</ensures>
    </member>
    <member name="M:ArraySegments.ArraySegmentExtensions.Skip``1(System.ArraySegment{``0},System.Int32)">
      <summary>
            Creates a new array segment by skipping a number of elements from the beginning of this array segment.
            </summary>
      <typeparam name="T">The type of elements contained in the array.</typeparam>
      <param name="segment">The array segment.</param>
      <param name="count">The number of elements to skip. This must be in the range <c>[0, <paramref name="segment" />.Count]</c>.</param>
      <returns>The new array segment.</returns>
      <requires csharp="count &gt;= 0" vb="count &gt;= 0">count &gt;= 0</requires>
      <requires csharp="count &lt;= segment.Count" vb="count &lt;= segment.Count">count &lt;= segment.Count</requires>
      <ensures csharp="result.Array == segment.Array" vb="result.Array = segment.Array">result.Array == segment.Array</ensures>
      <ensures csharp="result.Offset == segment.Offset + count" vb="result.Offset = segment.Offset + count">result.Offset == segment.Offset + count</ensures>
      <ensures csharp="result.Count == segment.Count - count" vb="result.Count = segment.Count - count">result.Count == segment.Count - count</ensures>
    </member>
    <member name="M:ArraySegments.ArraySegmentExtensions.Slice``1(System.ArraySegment{``0},System.Int32,System.Int32)">
      <summary>
            Creates a new array segment by skipping a number of elements and then taking a number of elements from this array segment.
            </summary>
      <typeparam name="T">The type of elements contained in the array.</typeparam>
      <param name="segment">The array segment.</param>
      <param name="skipCount">The number of elements to skip. This must be in the range <c>[0, <paramref name="segment" />.Count]</c>.</param>
      <param name="takeCount">The number of elements in the new array segment. This must be in the range <c>[0, <paramref name="segment" />.Count - <paramref name="skipCount" />]</c>.</param>
      <returns>The new array segment.</returns>
      <requires csharp="skipCount &gt;= 0" vb="skipCount &gt;= 0">skipCount &gt;= 0</requires>
      <requires csharp="skipCount &lt;= segment.Count" vb="skipCount &lt;= segment.Count">skipCount &lt;= segment.Count</requires>
      <requires csharp="takeCount &gt;= 0" vb="takeCount &gt;= 0">takeCount &gt;= 0</requires>
      <requires csharp="takeCount &lt;= segment.Count - skipCount" vb="takeCount &lt;= segment.Count - skipCount">takeCount &lt;= segment.Count - skipCount</requires>
      <ensures csharp="result.Array == segment.Array" vb="result.Array = segment.Array">result.Array == segment.Array</ensures>
      <ensures csharp="result.Offset == segment.Offset + skipCount" vb="result.Offset = segment.Offset + skipCount">result.Offset == segment.Offset + skipCount</ensures>
      <ensures csharp="result.Count == takeCount" vb="result.Count = takeCount">result.Count == takeCount</ensures>
    </member>
    <member name="M:ArraySegments.ArraySegmentExtensions.TakeLast``1(System.ArraySegment{``0},System.Int32)">
      <summary>
            Creates a new array segment by taking a number of elements from the end of this array segment.
            </summary>
      <typeparam name="T">The type of elements contained in the array.</typeparam>
      <param name="segment">The array segment.</param>
      <param name="count">The number of elements in the new array segment. This must be in the range <c>[0, <paramref name="segment" />.Count]</c>.</param>
      <returns>The new array segment.</returns>
      <requires csharp="count &gt;= 0" vb="count &gt;= 0">count &gt;= 0</requires>
      <requires csharp="count &lt;= segment.Count" vb="count &lt;= segment.Count">count &lt;= segment.Count</requires>
      <ensures csharp="result.Array == segment.Array" vb="result.Array = segment.Array">result.Array == segment.Array</ensures>
      <ensures csharp="result.Offset == segment.Offset + segment.Count - count" vb="result.Offset = segment.Offset + segment.Count - count">result.Offset == segment.Offset + segment.Count - count</ensures>
      <ensures csharp="result.Count == count" vb="result.Count = count">result.Count == count</ensures>
    </member>
    <member name="M:ArraySegments.ArraySegmentExtensions.SkipLast``1(System.ArraySegment{``0},System.Int32)">
      <summary>
            Creates a new array segment by skipping a number of elements from the end of this array segment.
            </summary>
      <typeparam name="T">The type of elements contained in the array.</typeparam>
      <param name="segment">The array segment.</param>
      <param name="count">The number of elements to skip. This must be in the range <c>[0, <paramref name="segment" />.Count]</c>.</param>
      <returns>The new array segment.</returns>
      <requires csharp="count &gt;= 0" vb="count &gt;= 0">count &gt;= 0</requires>
      <requires csharp="count &lt;= segment.Count" vb="count &lt;= segment.Count">count &lt;= segment.Count</requires>
      <ensures csharp="result.Array == segment.Array" vb="result.Array = segment.Array">result.Array == segment.Array</ensures>
      <ensures csharp="result.Offset == segment.Offset" vb="result.Offset = segment.Offset">result.Offset == segment.Offset</ensures>
      <ensures csharp="result.Count == segment.Count - count" vb="result.Count = segment.Count - count">result.Count == segment.Count - count</ensures>
    </member>
    <member name="M:ArraySegments.ArraySegmentExtensions.AsIList``1(System.ArraySegment{``0})">
      <summary>
            Creates an <see cref="T:System.Collections.Generic.IList`1" /> wrapper for this array segment. The wrapper also implements <see cref="T:System.Collections.IList" />.
            </summary>
      <typeparam name="T">The type of elements contained in the array.</typeparam>
      <param name="segment">The array segment.</param>
      <returns>The wrapper.</returns>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures csharp="result.Segment == segment" vb="result.Segment = segment ">result.Segment == segment</ensures>
    </member>
    <member name="M:ArraySegments.ArraySegmentExtensions.CopyTo``1(System.ArraySegment{``0},System.ArraySegment{``0})">
      <summary>
            Copies the elements in this array segment into a destination array segment. The copy operation will not overflow the bounds of the segments; it will copy <c>min(segment.Count, destination.Count)</c> elements.
            </summary>
      <typeparam name="T">The type of elements contained in the array.</typeparam>
      <param name="segment">The source array segment.</param>
      <param name="destination">The detsintation array segment.</param>
    </member>
    <member name="M:ArraySegments.ArraySegmentExtensions.CopyTo``1(System.ArraySegment{``0},``0[],System.Int32)">
      <summary>
            Copies the elements in this array segment into a destination array.
            </summary>
      <typeparam name="T">The type of elements contained in the array.</typeparam>
      <param name="segment">The array segment.</param>
      <param name="array">The destination array. May not be <c>null</c>.</param>
      <param name="arrayIndex">The index in the destination array at which to begin copying. Defaults to <c>0</c>. Must be greater than or equal to <c>0</c>.</param>
      <requires csharp="array != null" vb="array &lt;&gt; Nothing">array != null</requires>
      <requires csharp="arrayIndex &gt;= 0" vb="arrayIndex &gt;= 0">arrayIndex &gt;= 0</requires>
      <requires csharp="segment.Count &lt;= array.Length - arrayIndex" vb="segment.Count &lt;= array.Length - arrayIndex">segment.Count &lt;= array.Length - arrayIndex</requires>
    </member>
    <member name="M:ArraySegments.ArraySegmentExtensions.ToArray``1(System.ArraySegment{``0})">
      <summary>
            Creates a new array containing the elements in this array segment.
            </summary>
      <typeparam name="T">The type of elements contained in the array.</typeparam>
      <param name="segment">The array segment.</param>
      <returns>The new array.</returns>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures csharp="result.Length == segment.Count" vb="result.Length = segment.Count">result.Length == segment.Count</ensures>
    </member>
    <member name="T:ArraySegments.ArraySegmentListWrapper`1">
      <summary>
            A wrapper around an array segment, providing <see cref="T:System.Collections.Generic.IList`1" /> and <see cref="T:System.Collections.IList" /> implementations.
            </summary>
      <typeparam name="T">The type of elements contained in the array.</typeparam>
    </member>
    <member name="F:ArraySegments.ArraySegmentListWrapper`1.segment">
      <summary>
            The array segment.
            </summary>
    </member>
    <member name="M:ArraySegments.ArraySegmentListWrapper`1.#ctor(System.ArraySegment{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:ArraySegments.ArraySegmentListWrapper`1" /> class.
            </summary>
      <param name="segment">The array segment.</param>
    </member>
    <member name="M:ArraySegments.ArraySegmentListWrapper`1.GetEnumerator">
      <summary>
            Gets an enumerator which enumerates the elements in the array segment.
            </summary>
      <returns>An enumerator which enumerates the elements in the array segment.</returns>
      <ensures inheritedFrom="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures inheritedFrom="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_Model == this.get_Model" vb="result.get_Model = Me.get_Model">result.get_Model == this.get_Model</ensures>
    </member>
    <member name="M:ArraySegments.ArraySegmentListWrapper`1.ObjectIsT(System.Object)">
      <summary>
            Returns whether or not the type of a given item indicates it is appropriate for storing in this list.
            </summary>
      <param name="item">The item to test.</param>
      <returns>
        <c>true</c> if the item is appropriate to store in this list; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:ArraySegments.ArraySegmentListWrapper`1.NotSupported">
      <summary>
            Returns an exception stating that the operation is not supported.
            </summary>
      <returns>An exception stating that the operation is not supported.</returns>
    </member>
    <member name="P:ArraySegments.ArraySegmentListWrapper`1.Segment">
      <summary>
            Gets the array segment.
            </summary>
    </member>
    <member name="P:ArraySegments.ArraySegmentListWrapper`1.Count">
      <summary>
            Gets the number of elements in this array segment.
            </summary>
      <getter>
        <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.get_Count" inheritedFromTypeName="ICollection" csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
        <ensures inheritedFrom="M:System.Collections.ICollection.get_Count" inheritedFromTypeName="ICollection" csharp="result &gt;= 0" vb="result &gt;= 0">result &gt;= 0</ensures>
      </getter>
    </member>
    <member name="P:ArraySegments.ArraySegmentListWrapper`1.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <getter>
        <requires inheritedFrom="M:System.Collections.Generic.IList`1.get_Item(System.Int32)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
        <requires inheritedFrom="M:System.Collections.Generic.IList`1.get_Item(System.Int32)" inheritedFromTypeName="IList" csharp="index &lt; this.Count" vb="index &lt; Me.Count">index &lt; this.Count</requires>
      </getter>
      <setter>
        <requires inheritedFrom="M:System.Collections.Generic.IList`1.set_Item(System.Int32,`0)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
        <requires inheritedFrom="M:System.Collections.Generic.IList`1.set_Item(System.Int32,`0)" inheritedFromTypeName="IList" csharp="index &lt; this.Count" vb="index &lt; Me.Count">index &lt; this.Count</requires>
      </setter>
    </member>
    <member name="T:ArraySegments.ArraySegmentReader`1">
      <summary>
            A reader that divides a source <see cref="T:System.ArraySegment`1" /> into multiple <see cref="T:System.ArraySegment`1" /> instances.
            </summary>
      <typeparam name="T">The type of elements contained in the array.</typeparam>
    </member>
    <member name="F:ArraySegments.ArraySegmentReader`1.source">
      <summary>
            The source array segment.
            </summary>
    </member>
    <member name="M:ArraySegments.ArraySegmentReader`1.#ctor(System.ArraySegment{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:ArraySegments.ArraySegmentReader`1" /> class.
            </summary>
      <param name="source">The source array segment.</param>
      <ensures csharp="this.Position == 0" vb="Me.Position = 0">this.Position == 0</ensures>
    </member>
    <member name="M:ArraySegments.ArraySegmentReader`1.Seek(System.Int32,System.IO.SeekOrigin)">
      <summary>
            Sets the position of this reader. Returns the new position.
            </summary>
      <param name="offset">The offset from the origin.</param>
      <param name="origin">The origin to use when setting the position.</param>
      <returns>The new position.</returns>
      <ensures csharp="origin != default(System.IO.SeekOrigin) || this.Position == offset" vb="origin &lt;&gt; Nothing OrElse Me.Position = offset">origin != default(System.IO.SeekOrigin) || this.Position == offset</ensures>
      <ensures csharp="origin != (System.IO.SeekOrigin)1 || this.Position == old(this.Position) + offset" vb="origin &lt;&gt; ((System.IO.SeekOrigin)1) OrElse Me.Position = old(Me.Position) + offset">origin != (System.IO.SeekOrigin)1 || this.Position == old(this.Position) + offset</ensures>
      <ensures csharp="(origin == (System.IO.SeekOrigin)2 &amp;&amp; !(this.Position == this.Source.Count + offset)) != 0" vb="(origin = ((System.IO.SeekOrigin)2) AndAlso Not (Me.Position = Me.Source.Count + offset)) &lt;&gt; 0">(origin == (System.IO.SeekOrigin)2 &amp;&amp; !(this.Position == this.Source.Count + offset)) != 0</ensures>
    </member>
    <member name="M:ArraySegments.ArraySegmentReader`1.Read(System.Int32)">
      <summary>
            Creates a new array segment which starts at the current position and covers the specified number of elements.
            </summary>
      <param name="count">The number of elements in the new array segment.</param>
      <returns>The new array segment.</returns>
      <requires csharp="count &gt;= 0" vb="count &gt;= 0">count &gt;= 0</requires>
      <requires csharp="this.Position &gt;= 0 &amp;&amp; this.Position &lt; this.Source.Count" vb="Me.Position &gt;= 0 AndAlso Me.Position &lt; Me.Source.Count">this.Position &gt;= 0 &amp;&amp; this.Position &lt; this.Source.Count</requires>
      <requires csharp="count &lt;= this.Source.Count - this.Position" vb="count &lt;= Me.Source.Count - Me.Position">count &lt;= this.Source.Count - this.Position</requires>
    </member>
    <member name="P:ArraySegments.ArraySegmentReader`1.Source">
      <summary>
            Gets the source array segment.
            </summary>
    </member>
    <member name="P:ArraySegments.ArraySegmentReader`1.Position">
      <summary>
            Gets or sets the position of this reader.
            </summary>
    </member>
    <member name="M:ArraySegments.ArraySegmentListWrapper`1.System#Collections#ICollection#get_SyncRoot">
      <ensures inheritedFrom="M:System.Collections.ICollection.get_SyncRoot" inheritedFromTypeName="ICollection" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:ArraySegments.ArraySegmentListWrapper`1.System#Collections#IList#get_Item(System.Int32)">
      <requires inheritedFrom="M:System.Collections.IList.get_Item(System.Int32)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires inheritedFrom="M:System.Collections.IList.get_Item(System.Int32)" inheritedFromTypeName="IList" csharp="index &lt; this.Count" vb="index &lt; Me.Count">index &lt; this.Count</requires>
    </member>
    <member name="M:ArraySegments.ArraySegmentListWrapper`1.System#Collections#IList#set_Item(System.Int32,System.Object)">
      <requires inheritedFrom="M:System.Collections.IList.set_Item(System.Int32,System.Object)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires inheritedFrom="M:System.Collections.IList.set_Item(System.Int32,System.Object)" inheritedFromTypeName="IList" csharp="index &lt; this.Count" vb="index &lt; Me.Count">index &lt; this.Count</requires>
    </member>
    <member name="M:ArraySegments.ArraySegmentListWrapper`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <requires inheritedFrom="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires inheritedFrom="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)" inheritedFromTypeName="IList" csharp="index &lt;= this.Count" vb="index &lt;= Me.Count">index &lt;= this.Count</requires>
    </member>
    <member name="M:ArraySegments.ArraySegmentListWrapper`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <requires inheritedFrom="M:System.Collections.IList.Insert(System.Int32,System.Object)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
    </member>
    <member name="M:ArraySegments.ArraySegmentListWrapper`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <requires inheritedFrom="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires inheritedFrom="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)" inheritedFromTypeName="IList" csharp="index &lt; this.Count" vb="index &lt; Me.Count">index &lt; this.Count</requires>
      <ensures inheritedFrom="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)" inheritedFromTypeName="IList" csharp="this.Count == old(this.Count) - 1" vb="Me.Count = old(Me.Count) - 1">this.Count == old(this.Count) - 1</ensures>
    </member>
    <member name="M:ArraySegments.ArraySegmentListWrapper`1.System#Collections#IList#RemoveAt(System.Int32)">
      <requires inheritedFrom="M:System.Collections.IList.RemoveAt(System.Int32)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires inheritedFrom="M:System.Collections.IList.RemoveAt(System.Int32)" inheritedFromTypeName="IList" csharp="index &lt; this.Count" vb="index &lt; Me.Count">index &lt; this.Count</requires>
    </member>
    <member name="M:ArraySegments.ArraySegmentListWrapper`1.System#Collections#Generic#ICollection{T}#Clear">
      <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.Clear" inheritedFromTypeName="ICollection" csharp="this.Count == 0" vb="Me.Count = 0">this.Count == 0</ensures>
    </member>
    <member name="M:ArraySegments.ArraySegmentListWrapper`1.System#Collections#IList#Clear">
      <ensures inheritedFrom="M:System.Collections.IList.Clear" inheritedFromTypeName="IList" csharp="this.IsSynchronized || this.Count == 0" vb="Me.IsSynchronized OrElse Me.Count = 0">this.IsSynchronized || this.Count == 0</ensures>
    </member>
    <member name="M:ArraySegments.ArraySegmentListWrapper`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.Add(`0)" inheritedFromTypeName="ICollection" csharp="this.Count &gt;= old(this.Count)" vb="Me.Count &gt;= old(Me.Count)">this.Count &gt;= old(this.Count)</ensures>
    </member>
    <member name="M:ArraySegments.ArraySegmentListWrapper`1.System#Collections#IList#Add(System.Object)">
      <ensures inheritedFrom="M:System.Collections.IList.Add(System.Object)" inheritedFromTypeName="IList" csharp="result &gt;= -1" vb="result &gt;= -1">result &gt;= -1</ensures>
      <ensures inheritedFrom="M:System.Collections.IList.Add(System.Object)" inheritedFromTypeName="IList" csharp="this.IsSynchronized || result &lt; this.Count" vb="Me.IsSynchronized OrElse result &lt; Me.Count">this.IsSynchronized || result &lt; this.Count</ensures>
      <ensures inheritedFrom="M:System.Collections.IList.Add(System.Object)" inheritedFromTypeName="IList" csharp="this.IsSynchronized || result &lt; 0 &amp;&amp; this.Count == old(this.Count) || this.Count == old(this.Count) + 1" vb="Me.IsSynchronized OrElse result &lt; 0 AndAlso (Me.Count = old(Me.Count)) OrElse Me.Count = old(Me.Count) + 1">this.IsSynchronized || result &lt; 0 &amp;&amp; this.Count == old(this.Count) || this.Count == old(this.Count) + 1</ensures>
    </member>
    <member name="M:ArraySegments.ArraySegmentListWrapper`1.System#Collections#Generic#IList{T}#IndexOf(`0)">
      <ensures inheritedFrom="M:System.Collections.Generic.IList`1.IndexOf(`0)" inheritedFromTypeName="IList" csharp="result &gt;= -1" vb="result &gt;= -1">result &gt;= -1</ensures>
      <ensures inheritedFrom="M:System.Collections.Generic.IList`1.IndexOf(`0)" inheritedFromTypeName="IList" csharp="result &lt; this.Count" vb="result &lt; Me.Count">result &lt; this.Count</ensures>
    </member>
    <member name="M:ArraySegments.ArraySegmentListWrapper`1.System#Collections#IList#IndexOf(System.Object)">
      <ensures inheritedFrom="M:System.Collections.IList.IndexOf(System.Object)" inheritedFromTypeName="IList" csharp="result &gt;= -1" vb="result &gt;= -1">result &gt;= -1</ensures>
      <ensures inheritedFrom="M:System.Collections.IList.IndexOf(System.Object)" inheritedFromTypeName="IList" csharp="this.IsSynchronized || result &lt; this.Count" vb="Me.IsSynchronized OrElse result &lt; Me.Count">this.IsSynchronized || result &lt; this.Count</ensures>
    </member>
    <member name="M:ArraySegments.ArraySegmentListWrapper`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
      <ensures inheritedFrom="M:System.Collections.Generic.ICollection`1.Contains(`0)" inheritedFromTypeName="ICollection" csharp="result ⇒ this.Count &gt; 0" vb="result Implies Me.Count &gt; 0">!result || this.Count &gt; 0</ensures>
    </member>
    <member name="M:ArraySegments.ArraySegmentListWrapper`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <requires inheritedFrom="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)" inheritedFromTypeName="ICollection" csharp="array != null" vb="array &lt;&gt; Nothing">array != null</requires>
      <requires inheritedFrom="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)" inheritedFromTypeName="ICollection" csharp="arrayIndex &gt;= 0" vb="arrayIndex &gt;= 0">arrayIndex &gt;= 0</requires>
      <requires inheritedFrom="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)" inheritedFromTypeName="ICollection" csharp="arrayIndex + this.Count &lt;= array.Length" vb="arrayIndex + Me.Count &lt;= array.Length">arrayIndex + this.Count &lt;= array.Length</requires>
    </member>
    <member name="M:ArraySegments.ArraySegmentListWrapper`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <requires inheritedFrom="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" inheritedFromTypeName="ICollection" csharp="array != null" vb="array &lt;&gt; Nothing">array != null</requires>
      <requires inheritedFrom="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" inheritedFromTypeName="ICollection" csharp="array.Rank == 1" vb="array.Rank = 1">array.Rank == 1</requires>
      <requires inheritedFrom="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" inheritedFromTypeName="ICollection" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
      <requires inheritedFrom="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" inheritedFromTypeName="ICollection" csharp="index &lt;= array.Length + this.Count" vb="index &lt;= array.Length + Me.Count">index &lt;= array.Length + this.Count</requires>
    </member>
    <member name="M:ArraySegments.ArraySegmentListWrapper`1.System#Collections#IEnumerable#GetEnumerator">
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_Model == this.get_Model" vb="result.get_Model = Me.get_Model">result.get_Model == this.get_Model</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_CurrentIndex == -1" vb="result.get_CurrentIndex = -1">result.get_CurrentIndex == -1</ensures>
    </member>
    <member name="P:ArraySegments.ArraySegmentListWrapper`1.System#Collections#ICollection#SyncRoot">
      <getter>
        <ensures inheritedFrom="M:System.Collections.ICollection.get_SyncRoot" inheritedFromTypeName="ICollection" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:ArraySegments.ArraySegmentListWrapper`1.System#Collections#IList#Item(System.Int32)">
      <getter>
        <requires inheritedFrom="M:System.Collections.IList.get_Item(System.Int32)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
        <requires inheritedFrom="M:System.Collections.IList.get_Item(System.Int32)" inheritedFromTypeName="IList" csharp="index &lt; this.Count" vb="index &lt; Me.Count">index &lt; this.Count</requires>
      </getter>
      <setter>
        <requires inheritedFrom="M:System.Collections.IList.set_Item(System.Int32,System.Object)" inheritedFromTypeName="IList" csharp="index &gt;= 0" vb="index &gt;= 0">index &gt;= 0</requires>
        <requires inheritedFrom="M:System.Collections.IList.set_Item(System.Int32,System.Object)" inheritedFromTypeName="IList" csharp="index &lt; this.Count" vb="index &lt; Me.Count">index &lt; this.Count</requires>
      </setter>
    </member>
  </members>
</doc>